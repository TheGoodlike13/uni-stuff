
package eu.goodlike.plan.chaining;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ChainingService", targetNamespace = "http://chaining.mif.vu.lt/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ChainingService {


    /**
     * 
     * @param mode - backward of forward
     * @param goal - fact we're looking for
     * @param rules - rules used by chaining
     * @param assertions - facts we already have
     * @return
     *     returns eu.goodlike.plan.chaining.ChainingResult
     */
    @WebMethod(action = "clientQuery")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "clientQuery", targetNamespace = "http://chaining.mif.vu.lt/", className = "eu.goodlike.plan.chaining.ClientQuery")
    @ResponseWrapper(localName = "clientQueryResponse", targetNamespace = "http://chaining.mif.vu.lt/", className = "eu.goodlike.plan.chaining.ClientQueryResponse")
    @Action(input = "clientQuery", output = "http://chaining.mif.vu.lt/ChainingService/clientQueryResponse")
    ChainingResult clientQuery(
        @WebParam(name = "mode", targetNamespace = "")
        ChainingMode mode,
        @WebParam(name = "rules", targetNamespace = "")
        ChainingServiceRules rules,
        @WebParam(name = "assertions", targetNamespace = "")
        ChainingServiceAssertions assertions,
        @WebParam(name = "goal", targetNamespace = "")
        String goal);

}
